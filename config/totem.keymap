//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



#define HOST_OS                    2
#define ZMK_HELPERS_KEEP_NATIVE    0

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "zmk-helpers/unicode-chars/italian.dtsi"

#define ______ &trans

#define DEF   0
#define NAV   1
#define NUM   2
#define SYM   3
#define FUN   4

/* Timing constants */

#define HOMEROW_TAP_MS    280
#define TDANCE_TAP_MS     200
#define QUICK_TAP_MS      175
#define PRIOR_IDLE_MS     150

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2  // thumbs

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <HOMEROW_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <HOMEROW_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)
// tap: backspace | shift + tap: delete | hold: num layer
ZMK_MOD_MORPH(bs_del_num,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
mods = <(MOD_LSFT | MOD_RSFT)>;
)

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut,
    tapping-term-ms = <TDANCE_TAP_MS>;
    bindings = <&kp LG(C)>, <&kp LG(X)>;
)

ZMK_TAP_DANCE(LS_caps,
    tapping-term-ms = <TDANCE_TAP_MS>;
    bindings = <&kp LSHIFT>, <&caps_word>;
)

ZMK_TAP_DANCE(grave_acute,
    tapping-term-ms = <TDANCE_TAP_MS>;
    bindings = <&kp LALT(GRAVE)>, <&kp LALT(E) >;
)

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <TDANCE_TAP_MS>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <TDANCE_TAP_MS>;)


ZMK_COMBO(smart_num, SMART_NUM, LB0 LB1, DEF)  // smart_num, active on base
ZMK_COMBO(copy_cut, &copy_cut,   LB2 LB3, ALL)  // copy on tap, cut on double-tap, active on all layers
ZMK_COMBO(paste,    &kp LGUI(V), LB1 LB2, ALL)  // paste, active on all layers. Combo keys:
ZMK_COMBO(alfred, &kp LALT(SPACE), RM0 RM1, ALL) // alfred, active on all layers
ZMK_COMBO(vscode_cmd, &kp LSHFT(LGUI(P)), LM0 LM1, ALL) // vscode command palette, active on all layers

// define combos for accented characters
ZMK_COMBO(a_grave, &it_ag, LT4 LM4, DEF)  // à
ZMK_COMBO(e_grave, &it_eg, LT3 LT2, DEF)  // è
ZMK_COMBO(e_acute, &it_ea, LT2 LT1, DEF)  // é
ZMK_COMBO(i_grave, &it_ig, RT1 RT2, DEF)  // ì
ZMK_COMBO(o_grave, &it_og, RT2 RT3, DEF)  // ò
ZMK_COMBO(u_grave, &it_ug, RT0 RT1, DEF)  // ù
ZMK_CONDITIONAL_LAYER(func, NAV NUM, FUN) // Conditional layer for function keys, active when NAV and NUM layers are active

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
         &kp Q      &kp W      &kp E        &kp R      &kp T          &kp Y          &kp U        &kp I          &kp O      &kp P
         &hml LCTRL A  &hml LALT S  &hml LSHFT D    &hml LGUI F  &kp G          &kp H          &hmr RGUI J    &hmr RSHFT K      &hmr RALT L  &hmr RCTRL SEMI
&kp ESC  &kp Z      &kp X      &kp C        &kp V      &kp B          &kp N          &kp M        &kp COMMA      &kp DOT    &kp SLASH     &kp APOS
                               &lt SYM TAB  &LS_caps   &kp SPACE      &lt NAV ENTER  &bs_del_num  &kp RCTRL(GRAVE)
            >;
        };

        nav_layer {
            display-name = "Navigation";
            bindings = <
        ______  ______  ______  ______  ______      ______    ______     ______     ______     ______
        &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI  ______      &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  ______
______  ______  ______  ______  ______  ______      &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    ______  ______
                        ______  ______  ______      ______    ______     ______
            >;
        };

        num_layer {
            display-name = "Numbers";
            bindings = <
        &kp LBKT  &kp N1  &kp N2  &kp N3   &kp RBKT       ______  ______  ______  ______  ______
        &kp STAR  &kp N4  &kp N5  &kp N6   &kp PLUS       ______  &kp RGUI  &kp RSHFT  &kp RALT  &kp LCTRL
______  &kp FSLH  &kp N7  &kp N8  &kp N9   &kp MINUS      ______  ______  ______  ______  ______  ______
                             &kp N0  &kp DOT  &kp EQUAL      ______  ______  ______
            >;
        };

        sym_layer {
            display-name = "Symbols";
            bindings = <
        &kp GRAVE  &kp LT    &kp GT    &kp MINUS  &kp PIPE       &kp CARET  &kp LBRC      &kp RBRC      ______       ______
        &kp EXCL   &kp STAR  &kp FSLH  &kp EQUAL  &kp AMPS       &kp HASH   &hmr RGUI LPAR  &hmr RSHFT RPAR  &hmr RALT DQT  &hmr RCTRL SEMI
______  &kp TILDE  &kp PLUS  &kp LBKT  &kp RBKT   &kp PRCNT      &kp AT     &kp COLON     &kp COMMA     &kp DOT      &kp SLASH     &kp APOS
                             ______    ______     ______         ______     ______        ______
            >;
        };

        fun_layer {
            display-name = "Functions";
            bindings = <
                &bootloader  &kp F1  &kp F2   &kp F3   &kp F4       ______  ______  ______  ______  ______
                ______       &kp F5  &kp F6   &kp F7   &kp F8       ______  ______  ______  ______  ______
&studio_unlock  ______       &kp F9  &kp F10  &kp F11  &kp F12      ______  ______  ______  ______  ______  ______
                                     ______   ______   ______       ______  ______  ______
            >;
        };
    };
};
