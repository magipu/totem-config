//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



#define HOST_OS                    2
#define ZMK_HELPERS_KEEP_NATIVE    0

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "zmk-helpers/unicode-chars/italian.dtsi"

#define ______ &trans

#define DEF   0
#define NAV   1
#define NUM   2
#define SYM   3
#define FUN   4

/* Timing constants */

#define HOMEROW_TAP_MS    280
#define TDANCE_TAP_MS     200
#define QUICK_TAP_MS      175
#define PRIOR_IDLE_MS     150

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2  // thumbs

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <HOMEROW_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <HOMEROW_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, < &kp >;
)

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_MOD_MORPH(bs_del_sym,
    bindings = <&lt SYM BSPC>, <&kp DEL>;
mods = <(MOD_LSFT | MOD_RSFT)>;
)

// // tap: copy | double-tap: cut
// ZMK_TAP_DANCE(copy_cut,
//     tapping-term-ms = <TDANCE_TAP_MS>;
//     bindings = <&kp LG(C)>, <&kp LG(X)>;
// )

// tap: shift | double-tap: caps word
ZMK_TAP_DANCE(LS_caps,
    tapping-term-ms = <TDANCE_TAP_MS>;
    bindings = <&kp LSHIFT>, <&caps_word>;
)

ZMK_MOD_MORPH(grave_acute,
    bindings = <&kp LA(GRAVE)>, <&kp LA(E)>;
    mods = <(MOD_LSFT | MOD_RSFT)>;
)

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <TDANCE_TAP_MS>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <TDANCE_TAP_MS>;)

ZMK_COMBO(smart_num,  SMART_NUM,     LM4 LB4, DEF)  // smart_num, active on base
ZMK_COMBO(copy,       &kp LG(C),     LT0 LT1, ALL)  // copy, active on all layers
ZMK_COMBO(cut,        &kp LG(X),     LT2 LM2, ALL)  // cut, active on all layers
ZMK_COMBO(paste,      &kp LG(V),     LT1 LM1, ALL)  // paste, active on all layers
ZMK_COMBO(clipboard,  &kp LA(LG(C)), LT3 LM3, ALL)  // clipboard, active on all layers
ZMK_COMBO(alfred,     &kp LA(SPACE), RM0 RM1, DEF)  // alfred, active on base
ZMK_COMBO(vscode_cmd, &kp LS(LG(P)), LM0 LM1, DEF)  // vscode command palette, active on base
ZMK_COMBO(undo,       &kp LG(Z),     LT0 LM0, DEF)  // undo, active on base
ZMK_COMBO(redo,       &kp LG(LS(Z)), LB0 LM0, DEF)  // redo, active on base
ZMK_COMBO(undo_2,     &kp LG(Z),     RT0 RM0, DEF)  // undo, active on base
ZMK_COMBO(redo_2,     &kp LG(LS(Z)), RB0 RM0, DEF)  // redo, active on base
ZMK_COMBO(next_win,   &kp LG(GRAVE), LM1 LB1, DEF)  // next window, active on base
ZMK_COMBO(save,       &kp LG(S), LM3 LB3, DEF)  // save, active on base

ZMK_COMBO(accent_grave_acute, &grave_acute, RB1 RM1, DEF)

&num_word {
  continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL SPACE LT GT DLLR COLON>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
         &kp Q         &kp W        &kp E         &kp R        &kp T              &kp Y          &kp U        &kp I              &kp O        &kp P
         &hml LCTRL A  &hml LALT S  &hml LSHFT D  &hml LGUI F  &kp G              &kp H          &hmr RGUI J  &hmr RSHFT K       &hmr RALT L  &hmr RCTRL SEMI
&kp ESC  &kp Z         &kp X        &kp C         &kp V        &kp B              &kp N          &kp M        &kp COMMA          &kp DOT      &kp SLASH        &kp APOS
                                    &kp TAB       &LS_caps     &lt NUM SPACE      &lt NAV ENTER  &bs_del_sym  &lt FUN RC(GRAVE)
            >;
        };

        nav_layer {
            display-name = "Nav";
            bindings = <
        ______     ______    ______     ______      ______        &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        ______
        &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI    ______        &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      ______
______  ______     ______    ______     ______      ______        &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  ______  ______
                             ______     ______      ______        ______        ______        ______
            >;
        };

        num_layer {
            display-name = "Num";
            bindings = <
        &kp STAR  &kp N1  &kp N2  &kp N3   &kp PLUS       ______  ______          ______           ______    ______
        &kp FSLH  &kp N4  &kp N5  &kp N6   &kp MINUS      ______  &hmr RGUI LPAR  &hmr RSHFT RPAR  &kp RALT  &kp LCTRL
______  &kp BSPC  &kp N7  &kp N8  &kp N9   &kp EQUAL      ______  ______          ______           ______    ______     ______
                             &kp N0  &kp DOT  ______      ______  ______          ______
            >;
        };

        sym_layer {
            display-name = "Sym";
            bindings = <
        &kp STAR   &kp AT     &kp DLLR  &kp LS(POUND)   &kp DQT    &kp EQUAL       &kp LBRC        &kp LBKT         &kp LPAR         &kp RBKT
        &kp PLUS   &kp HASH  &kp EXCL  &kp PRCNT  &kp PIPE       &kp MINUS  &hmr RGUI RBRC  &hmr RSHFT RBKT  &hmr RALT RPAR  &hmr RCTRL COLON
______  &kp BSPC   &kp FSLH   &kp BSLH &kp TILDE  &kp AMPS       &kp UNDER  &kp QMARK          &kp LT           &kp GT           &kp CARET    &kp GRAVE
                              ______    ______     ______          ______     ______          ______
            >;
        };

        fun_layer {
            display-name = "Fun";
            bindings = <
                &bootloader  &kp F1  &kp F2   &kp F3   &kp F4       &kp C_VOL_UP  &kp C_VOL_DN  &kp C_MUTE  ______  &kp C_POWER
                ______       &kp F5  &kp F6   &kp F7   &kp F8       &kp C_PREV    &kp C_PP      &kp C_NEXT  ______  &kp C_AL_LOCK
&studio_unlock  ______       &kp F9  &kp F10  &kp F11  &kp F12      &kp C_BRI_UP  &kp C_BRI_DN  ______      ______  &kp K_CANCEL   ______
                                     ______   ______   ______       ______        ______        ______
            >;
        };
    };
};
